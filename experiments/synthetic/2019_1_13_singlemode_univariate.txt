probs = [1., 0]
means = [np.asarray([0]), np.asarray([1])]
covs  = [np.asarray([.1]), np.asarray([.1])]
Xs, ys, zs = generate_data(probs, means, covs)

"""
Initialize the model and the optimizer
"""
num_networks = 10
x_dim = np.size(Xs, axis=0)
y_dim = 1
network_structure = []
model = FC_SVGD(x_dim, y_dim, num_networks, network_structure)


"""
Data preparation
"""
N = np.size(Xs, axis=0)
train_ratio = 0.8
N_train = int(N * train_ratio)
D = 1

if D == 1:
	Xs_train = Xs[:N_train]
	Xs_train = np.expand_dims(Xs_train, axis=1)
else:
	Xs_train = Xs[:N_train, :]

# Xs_train = Xs[:N_train]
ys_train = ys[:N_train]

if D == 1:
	Xs_test = Xs[N_train : ]
	Xs_test = np.expand_dims(Xs_test, axis=1)
else:
	Xs_test = Xs[N_train : , :]
ys_test = ys[N_train : ]


(venv) Nguyens-MacBook-Pro:BNN_SVGD nguyenmanhduc$ python synthetic.py 
Epoch 0 => loss = 7830.51318359375, rsme = 3.595616340637207
Epoch 50 => loss = 5973.31103515625, rsme = 3.2969627380371094
Epoch 100 => loss = 5046.1201171875, rsme = 3.2406234741210938
Epoch 150 => loss = 4360.3388671875, rsme = 3.195000410079956
Epoch 200 => loss = 3800.701904296875, rsme = 3.1390457153320312
Epoch 250 => loss = 3333.315673828125, rsme = 3.1213860511779785
Epoch 300 => loss = 2935.3056640625, rsme = 3.1082818508148193
Epoch 350 => loss = 2592.35498046875, rsme = 3.0843098163604736
Epoch 400 => loss = 2302.200927734375, rsme = 3.0709009170532227
Epoch 450 => loss = 2046.16845703125, rsme = 3.056020975112915
Epoch 500 => loss = 1833.080322265625, rsme = 3.05509877204895
Epoch 550 => loss = 1649.30810546875, rsme = 3.0390775203704834
Epoch 600 => loss = 1491.831787109375, rsme = 3.013380765914917
Epoch 650 => loss = 1359.70458984375, rsme = 2.9969968795776367
Epoch 700 => loss = 1240.74951171875, rsme = 2.9747440814971924
Epoch 750 => loss = 1140.126953125, rsme = 2.954987049102783
Epoch 800 => loss = 1052.3533935546875, rsme = 2.9267570972442627
Epoch 850 => loss = 973.0311279296875, rsme = 2.8866944313049316
Epoch 900 => loss = 906.7984619140625, rsme = 2.854595184326172
Epoch 950 => loss = 848.2638549804688, rsme = 2.822767972946167
Epoch 1000 => loss = 795.730712890625, rsme = 2.7868845462799072
Epoch 1050 => loss = 750.2474365234375, rsme = 2.7510035037994385
Epoch 1100 => loss = 707.106689453125, rsme = 2.711219549179077
Epoch 1150 => loss = 666.3364868164062, rsme = 2.67113995552063
Epoch 1200 => loss = 629.7474365234375, rsme = 2.630342960357666
Epoch 1250 => loss = 595.0534057617188, rsme = 2.5871002674102783
Epoch 1300 => loss = 561.8682861328125, rsme = 2.5419721603393555
Epoch 1350 => loss = 531.5361328125, rsme = 2.494685649871826
Epoch 1400 => loss = 503.4295349121094, rsme = 2.4466371536254883
Epoch 1450 => loss = 477.53814697265625, rsme = 2.399506092071533
Epoch 1500 => loss = 455.3263854980469, rsme = 2.348341703414917
Epoch 1550 => loss = 436.107421875, rsme = 2.2951571941375732
Epoch 1600 => loss = 417.9278259277344, rsme = 2.2464749813079834
Epoch 1650 => loss = 401.1033935546875, rsme = 2.2008776664733887
Epoch 1700 => loss = 386.0736083984375, rsme = 2.157493829727173
Epoch 1750 => loss = 372.7336120605469, rsme = 2.1226487159729004
Epoch 1800 => loss = 361.8833312988281, rsme = 2.0909759998321533
Epoch 1850 => loss = 354.07525634765625, rsme = 2.052567958831787
Epoch 1900 => loss = 348.9668884277344, rsme = 2.019954204559326
Epoch 1950 => loss = 345.5251770019531, rsme = 2.0017495155334473
Parameter containing:
tensor([[0.1399]], requires_grad=True)
Parameter containing:
tensor([[0.0029]], requires_grad=True)
Parameter containing:
tensor([[-0.0573]], requires_grad=True)
Parameter containing:
tensor([[0.0080]], requires_grad=True)
Parameter containing:
tensor([[0.0171]], requires_grad=True)
Parameter containing:
tensor([[0.0504]], requires_grad=True)
Parameter containing:
tensor([[0.0731]], requires_grad=True)
Parameter containing:
tensor([[0.0806]], requires_grad=True)
Parameter containing:
tensor([[-0.0041]], requires_grad=True)
Parameter containing:
tensor([[0.0057]], requires_grad=True)