probs = [0.6, 0.4]
# means = [np.asarray([0,0]), np.asarray([1,1])]
# covs  = [np.asarray([[.1,0],[0,.1]]), np.asarray([[.1,0],[0,.1]])]
means = [np.asarray([0]), np.asarray([2])]
covs  = [np.asarray([1]), np.asarray([1])]
Xs, ys, zs = generate_data(probs, means, covs)

"""
Initialize the model and the optimizer
"""
num_networks = 15
# x_dim = np.size(Xs, axis=0)
x_dim = 1
y_dim = 1
network_structure = []
model = FC_SVGD(x_dim, y_dim, num_networks, network_structure)



Epoch 0 => loss = 592766.25, rsme = 24.410734176635742
Epoch 50 => loss = 572182.125, rsme = 24.3870792388916
Epoch 100 => loss = 562004.875, rsme = 24.3759822845459
Epoch 150 => loss = 554172.25, rsme = 24.367568969726562
Epoch 200 => loss = 547595.9375, rsme = 24.360538482666016
Epoch 250 => loss = 541845.0625, rsme = 24.35437774658203
Epoch 300 => loss = 536694.3125, rsme = 24.348834991455078
Epoch 350 => loss = 532008.8125, rsme = 24.3437557220459
Epoch 400 => loss = 527699.125, rsme = 24.339038848876953
Epoch 450 => loss = 523701.9375, rsme = 24.334613800048828
Epoch 500 => loss = 519971.3125, rsme = 24.330434799194336
Epoch 550 => loss = 516471.9375, rsme = 24.326459884643555
Epoch 600 => loss = 513175.75, rsme = 24.322662353515625
Epoch 650 => loss = 510060.3125, rsme = 24.319011688232422
Epoch 700 => loss = 507107.4375, rsme = 24.315500259399414
Epoch 750 => loss = 504301.5, rsme = 24.312105178833008
Epoch 800 => loss = 501630.53125, rsme = 24.30881690979004
Epoch 850 => loss = 499082.1875, rsme = 24.30562400817871
Epoch 900 => loss = 496647.6875, rsme = 24.302515029907227
Epoch 950 => loss = 494318.375, rsme = 24.299488067626953
Parameter containing:
tensor([[0.7251]], requires_grad=True)
Parameter containing:
tensor([[0.7141]], requires_grad=True)
Parameter containing:
tensor([[-0.0368]], requires_grad=True)
Parameter containing:
tensor([[1.0601]], requires_grad=True)
Parameter containing:
tensor([[-0.9567]], requires_grad=True)
Parameter containing:
tensor([[0.7115]], requires_grad=True)
Parameter containing:
tensor([[-0.7902]], requires_grad=True)
Parameter containing:
tensor([[-0.0572]], requires_grad=True)
Parameter containing:
tensor([[0.9447]], requires_grad=True)
Parameter containing:
tensor([[0.7872]], requires_grad=True)
Parameter containing:
tensor([[-0.6684]], requires_grad=True)
Parameter containing:
tensor([[-0.1094]], requires_grad=True)
Parameter containing:
tensor([[-0.1940]], requires_grad=True)
Parameter containing:
tensor([[-0.6831]], requires_grad=True)
Parameter containing:
tensor([[0.9493]], requires_grad=True)